let socket;
let currentState = 'waiting';
let myRole = null;
let isNightActionDone = false;
let myUsername = null;

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª—è—Ö
const ROLE_INFO = {
    'civilian': {
        name: '–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å',
        description: '–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –Ω–∞–π—Ç–∏ –∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –º–∞—Ñ–∏—é –ø—É—Ç–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–Ω–µ–º. –£ –≤–∞—Å –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π.',
        canActAtNight: false,
        actionDescription: '',
        cardImage: '/static/images/mirniy.jpg',
        goal: '–ù–∞–π—Ç–∏ –∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—Å—é –º–∞—Ñ–∏—é –ø—É—Ç–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è'
    },
    'mafia': {
        name: '–ú–∞—Ñ–∏—è',
        description: '–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—Å–µ—Ö –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π. –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞.',
        canActAtNight: true,
        actionDescription: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞',
        cardImage: '/static/images/mafia.jpg',
        goal: '–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—Å–µ—Ö –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π'
    },
    'doctor': {
        name: '–î–æ–∫—Ç–æ—Ä',
        description: '–í—ã –º–æ–∂–µ—Ç–µ —Å–ø–∞—Å–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –æ—Ç —Å–º–µ—Ä—Ç–∏. –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã.',
        canActAtNight: true,
        actionDescription: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ª–µ—á–µ–Ω–∏—è',
        cardImage: '/static/images/doctor.jpg',
        goal: '–ü–æ–º–æ–≥–∞—Ç—å –º–∏—Ä–Ω—ã–º –∂–∏—Ç–µ–ª—è–º, —Å–ø–∞—Å–∞—è –∏—Ö –æ—Ç –º–∞—Ñ–∏–∏'
    },
    'sheriff': {
        name: '–®–µ—Ä–∏—Ñ',
        description: '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –º–∞—Ñ–∏–∏. –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.',
        canActAtNight: true,
        actionDescription: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
        cardImage: '/static/images/sheriff.jpg',
        goal: '–í—ã—è–≤–∏—Ç—å –º–∞—Ñ–∏—é –∏ –ø–æ–º–æ—á—å –º–∏—Ä–Ω—ã–º –∂–∏—Ç–µ–ª—è–º'
    }
};

// –§–∞–∑—ã –∏–≥—Ä—ã
const GAME_PHASES = {
    WAITING: 'waiting',
    NIGHT: 'night',
    DAY: 'day',
    VOTING: 'voting'
};

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addChatMessage(message) {
    const chat = document.getElementById('chat-messages');
    if (!chat) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `chat-message ${message.type}-message`;
    
    let content = '';
    if (message.type === 'system') {
        content = `<span class="timestamp">[${message.timestamp}]</span> ${message.text}`;
    } else {
        content = `<span class="timestamp">[${message.timestamp}]</span> <strong>${message.username}:</strong> ${message.text}`;
    }
    
    messageDiv.innerHTML = content;
    chat.appendChild(messageDiv);
    chat.scrollTop = chat.scrollHeight;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å —Ä–æ–ª—å—é
function showRoleModal(role) {
    const roleInfo = ROLE_INFO[role];
    const modal = document.getElementById('role-modal');
    if (!modal) return;
    
    const roleText = document.getElementById('role-text');
    if (!roleText) return;
    
    roleText.innerHTML = `
        <h3>–í–∞—à–∞ —Ä–æ–ª—å - ${roleInfo.name}</h3>
        <p>${roleInfo.description}</p>
    `;
    
    const modalInstance = M.Modal.getInstance(modal);
    if (!modalInstance) {
        M.Modal.init(modal).open();
    } else {
        modalInstance.open();
    }
}

document.addEventListener('DOMContentLoaded', function() {
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤ —à–∞–±–ª–æ–Ω–µ
    myUsername = document.querySelector('#my-username').textContent;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
    socket = io();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    const modals = document.querySelectorAll('.modal');
    M.Modal.init(modals);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    const startButton = document.getElementById('start-game');
    if (startButton) {
        startButton.addEventListener('click', function() {
            socket.emit('start_game');
            startButton.disabled = true;
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    socket.on('connect', () => {
        console.log('Connected to server');
        addChatMessage({
            type: 'system',
            text: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
            timestamp: new Date().toLocaleTimeString()
        });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    socket.on('room_status_update', (data) => {
        console.log('Room status update:', data);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
        const gameStatus = document.getElementById('game-status');
        if (gameStatus) {
            switch (data.status) {
                case 'waiting':
                    gameStatus.textContent = 'üïí –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤';
                    break;
                case 'playing':
                    gameStatus.textContent = 'üéÆ –ò–≥—Ä–∞ –∏–¥–µ—Ç';
                    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
                    const startButton = document.getElementById('start-game');
                    if (startButton) {
                        startButton.style.display = 'none';
                    }
                    break;
                case 'finished':
                    gameStatus.textContent = 'üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞';
                    break;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        if (data.players) {
            updatePlayersList(data.players);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    socket.on('game_started', (data) => {
        console.log('Game started:', data);
        myRole = data.role;
        currentState = GAME_PHASES.NIGHT;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞
        showRoleModal(data.role);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É —Ä–æ–ª–∏
        showRoleCard(data.role);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        if (data.players) {
            updatePlayersList(data.players);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateGameState();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ñ–∞–∑—ã –∏–≥—Ä—ã
    socket.on('phase_change', (data) => {
        console.log('Phase change:', data);
        currentState = data.phase;
        isNightActionDone = false;
        updateGameState();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
    socket.on('chat_message', (message) => {
        console.log('Chat message:', message);
        addChatMessage(message);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–æ—á–∏
    socket.on('night_results', (data) => {
        if (data.killed) {
            addSystemMessage(`–≠—Ç–æ–π –Ω–æ—á—å—é –±—ã–ª —É–±–∏—Ç –∏–≥—Ä–æ–∫ ${data.killed}`);
        } else {
            addSystemMessage('–≠—Ç–æ–π –Ω–æ—á—å—é –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–≥–∏–±');
        }
        
        if (data.checked && myRole === 'sheriff') {
            const isMafiaText = data.isMafia ? '—è–≤–ª—è–µ—Ç—Å—è' : '–Ω–µ —è–≤–ª—è–µ—Ç—Å—è';
            addSystemMessage(`–ò–≥—Ä–æ–∫ ${data.checked} ${isMafiaText} –º–∞—Ñ–∏–µ–π`);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    socket.on('vote_results', (data) => {
        if (data.eliminated) {
            addSystemMessage(`–ì–æ—Ä–æ–¥ —Ä–µ—à–∏–ª –∫–∞–∑–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞ ${data.eliminated}`);
        } else {
            addSystemMessage('–ì–æ—Ä–æ–¥ –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    socket.on('game_over', (data) => {
        showGameOverModal(data.winner, data.roles);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞
    const chatInput = document.getElementById('chat-input');
    if (chatInput) {
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                const message = this.value.trim();
                if (message) {
                    socket.emit('chat_message', { message: message });
                    this.value = '';
                }
            }
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
function updateGameState() {
    const gameStatus = document.getElementById('game-status');
    const actionArea = document.getElementById('action-area');
    
    if (!gameStatus || !actionArea) return;
    
    switch (currentState) {
        case GAME_PHASES.NIGHT:
            gameStatus.textContent = 'üåô –ù–æ—á—å';
            if (myRole && ROLE_INFO[myRole].canActAtNight && !isNightActionDone) {
                showNightActionControls();
            } else {
                actionArea.innerHTML = '<p>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–æ—á–∏...</p>';
            }
            break;
            
        case GAME_PHASES.DAY:
            gameStatus.textContent = '‚òÄÔ∏è –î–µ–Ω—å - –û–±—Å—É–∂–¥–µ–Ω–∏–µ';
            actionArea.innerHTML = `
                <div class="day-discussion">
                    <h5>–í—Ä–µ–º—è –æ–±—Å—É–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—à–µ–¥—à–µ–π –Ω–æ—á–∏</h5>
                    <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∞—Ç –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è</p>
                    <button class="btn waves-effect waves-light" onclick="startVoting()">
                        –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                        <i class="material-icons right">how_to_vote</i>
                    </button>
                </div>
            `;
            break;
            
        case GAME_PHASES.VOTING:
            gameStatus.textContent = '‚òÄÔ∏è –î–µ–Ω—å - –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ';
            if (!isNightActionDone) {  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–ª–∞–≥ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                showVotingControls();
            } else {
                actionArea.innerHTML = '<p>–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...</p>';
            }
            break;
            
        default:
            gameStatus.textContent = 'üïí –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤';
            actionArea.innerHTML = '<p>–û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤...</p>';
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleNightAction
function handleNightAction(target) {
    if (!myRole || !ROLE_INFO[myRole].canActAtNight || isNightActionDone) {
        return;
    }

    socket.emit('night_action', { target: target });
    isNightActionDone = true;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    const actionArea = document.getElementById('action-area');
    if (actionArea) {
        actionArea.innerHTML = `
            <div class="action-confirmation">
                <h5>–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</h5>
                <p>${getActionConfirmationMessage(myRole, target)}</p>
                <p>–û–∂–∏–¥–∞–π—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–æ—á–∏...</p>
                <div class="progress">
                    <div class="indeterminate"></div>
                </div>
            </div>
        `;
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function getActionConfirmationMessage(role, target) {
    switch (role) {
        case 'mafia':
            return `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–µ–ª—å—é –∏–≥—Ä–æ–∫–∞ ${target}`;
        case 'doctor':
            return `–í—ã —Ä–µ—à–∏–ª–∏ –≤—ã–ª–µ—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ ${target}`;
        case 'sheriff':
            return `–í—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç–µ –∏–≥—Ä–æ–∫–∞ ${target}`;
        default:
            return `–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ –∏–≥—Ä–æ–∫–∞ ${target}`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
function showNightActionControls() {
    const actionArea = document.getElementById('action-area');
    if (!actionArea) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –∏–≥—Ä–æ–∫
    const playersList = document.getElementById('players-list');
    const currentPlayerElement = Array.from(playersList.getElementsByClassName('collection-item'))
        .find(item => item.dataset.username === myUsername);
    
    if (currentPlayerElement && currentPlayerElement.classList.contains('dead')) {
        actionArea.innerHTML = '<p class="dead-message">–í—ã –º–µ—Ä—Ç–≤—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è</p>';
        return;
    }

    // –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    if (isNightActionDone) {
        actionArea.innerHTML = '<p>–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ—ë –¥–µ–π—Å—Ç–≤–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–æ—á–∏...</p>';
        return;
    }
    
    const roleInfo = ROLE_INFO[myRole];
    if (!roleInfo.canActAtNight) {
        actionArea.innerHTML = '<p>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–æ—á–∏...</p>';
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    const alivePlayers = Array.from(playersList.getElementsByClassName('collection-item'))
        .filter(item => !item.classList.contains('dead'))
        .map(item => item.dataset.username)
        .filter(username => username !== myUsername);

    actionArea.innerHTML = `
        <div class="night-action">
            <h5>${roleInfo.actionDescription}</h5>
            <div class="collection">
                ${alivePlayers.map(player => `
                    <a href="#!" class="collection-item target-button waves-effect" onclick="handleNightAction('${player}')">
                        ${player}
                    </a>
                `).join('')}
            </div>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function showVotingControls() {
    const actionArea = document.getElementById('action-area');
    if (!actionArea) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –∏–≥—Ä–æ–∫
    const playersList = document.getElementById('players-list');
    const currentPlayerElement = Array.from(playersList.getElementsByClassName('collection-item'))
        .find(item => item.dataset.username === myUsername);
    
    if (currentPlayerElement && currentPlayerElement.classList.contains('dead')) {
        actionArea.innerHTML = '<p>–í—ã –º–µ—Ä—Ç–≤—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å</p>';
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    const alivePlayers = Array.from(playersList.getElementsByClassName('collection-item'))
        .filter(item => !item.classList.contains('dead'))
        .map(item => item.dataset.username)
        .filter(username => username !== myUsername);

    actionArea.innerHTML = `
        <div class="voting-section">
            <h5>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</h5>
            <p>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:</p>
            <div class="collection">
                ${alivePlayers.map(player => `
                    <a href="#!" class="collection-item vote-button waves-effect" data-username="${player}">
                        <span>${player}</span>
                        <span class="badge new" id="vote-count-${player}">0</span>
                    </a>
                `).join('')}
            </div>
            <div class="voting-controls">
                <button class="btn waves-effect waves-light skip-vote-btn" onclick="vote(null)">
                    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                    <i class="material-icons right">skip_next</i>
                </button>
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    const voteButtons = actionArea.getElementsByClassName('vote-button');
    Array.from(voteButtons).forEach(button => {
        button.addEventListener('click', () => {
            vote(button.dataset.username);
        });
    });
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function startVoting() {
    socket.emit('start_voting');
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function updateVotingProgress() {
    const totalPlayers = document.querySelectorAll('#players-list .collection-item:not(.dead)').length;
    const votesNeeded = Math.ceil(totalPlayers * 0.5);
    const votesCount = Object.keys(game_states[room_code].votes || {}).length;
    
    const progressBar = document.querySelector('#voting-progress');
    const votesNeededText = document.querySelector('#votes-needed');
    
    if (progressBar && votesNeededText) {
        const progress = (votesCount / totalPlayers) * 100;
        progressBar.style.width = `${progress}%`;
        votesNeededText.textContent = `–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ: ${votesCount}/${totalPlayers} (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: ${votesNeeded})`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
function generatePlayerButtons() {
    const players = document.querySelectorAll('#players-list .collection-item');
    let buttons = '';
    
    players.forEach(player => {
        const username = player.dataset.username;
        if (username !== myUsername) {  // –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è
            const isAlive = !player.classList.contains('dead');
            if (isAlive) {  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
                buttons += `
                    <a href="#!" class="collection-item" onclick="handlePlayerClick('${username}')">
                        ${username}
                    </a>
                `;
            }
        }
    });
    
    return buttons;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –∏–≥—Ä–æ–∫—É
function handlePlayerClick(target) {
    if (currentState === GAME_PHASES.NIGHT && !isNightActionDone) {
        performNightAction(target);
    } else if (currentState === GAME_PHASES.VOTING && !isNightActionDone) {
        vote(target);
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—á–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
function performNightAction(target) {
    socket.emit('night_action', {
        target: target
    });
    isNightActionDone = true;
    updateGameState();
}

// –§—É–Ω–∫—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function vote(target) {
    socket.emit('vote', { target: target });
    isNightActionDone = true; // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –≥–æ–ª–æ—Å –æ—Ç–¥–∞–Ω
    
    const actionArea = document.getElementById('action-area');
    if (actionArea) {
        actionArea.innerHTML = `
            <div class="vote-confirmation">
                <h5>–í–∞—à –≥–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç</h5>
                <p>${target ? `–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞ ${target}` : '–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ'}</p>
                <p>–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤...</p>
                <div class="progress">
                    <div class="indeterminate"></div>
                </div>
            </div>
        `;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
function updatePlayersList(players) {
    const playersList = document.getElementById('players-list');
    if (!playersList) return;
    
    playersList.innerHTML = players.map(player => `
        <div class="collection-item${player.is_alive ? '' : ' dead'}" data-username="${player.username}">
            ${player.username}
            ${player.is_alive ? '' : '<span class="badge">‚ò†Ô∏è</span>'}
        </div>
    `).join('');
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function addSystemMessage(message) {
    const chat = document.getElementById('chat-messages');
    if (!chat) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'chat-message system-message';
    messageDiv.textContent = message;
    chat.appendChild(messageDiv);
    chat.scrollTop = chat.scrollHeight;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
function showGameOverModal(winner, roles) {
    const modal = document.getElementById('game-over-modal');
    const gameOverText = document.getElementById('game-over-text');
    
    let winnerText = winner === 'mafia' ? 
        '<h4 class="red-text">–ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞!</h4>' : 
        '<h4 class="green-text">–ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏!</h4>';
    
    let rolesText = '<h5>–†–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤:</h5><ul class="collection">';
    for (const [username, role] of Object.entries(roles)) {
        const roleInfo = ROLE_INFO[role];
        rolesText += `
            <li class="collection-item">
                <span class="username">${username}</span>: 
                <span class="role ${role}">${roleInfo.name}</span>
            </li>`;
    }
    rolesText += '</ul>';
    
    gameOverText.innerHTML = `
        ${winnerText}
        ${rolesText}
        <div class="game-stats">
            <p>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</p>
        </div>
    `;
    
    M.Modal.getInstance(modal).open();
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
const styles = `
.action-confirmation {
    text-align: center;
    padding: 20px;
    background-color: #e8f5e9;
    border-radius: 4px;
    margin-top: 20px;
}

.night-action .collection {
    border: none;
    margin: 20px 0;
}

.night-action .collection-item {
    cursor: pointer;
    transition: background-color 0.3s;
}

.night-action .collection-item:hover {
    background-color: #f5f5f5;
}

.target-button {
    color: #26a69a !important;
}

.target-button:hover {
    background-color: #e0f2f1 !important;
}
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
const styleSheet = document.createElement("style");
styleSheet.textContent = styles;
document.head.appendChild(styleSheet);

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã —Ä–æ–ª–∏
function showRoleCard(role) {
    const roleCardSection = document.getElementById('role-card-section');
    const roleCardImage = document.getElementById('role-card-image');
    const roleName = document.getElementById('role-name');
    const roleGoal = document.getElementById('role-goal');
    
    if (roleCardSection && roleCardImage && ROLE_INFO[role]) {
        roleCardImage.src = ROLE_INFO[role].cardImage;
        roleName.textContent = ROLE_INFO[role].name;
        roleGoal.textContent = `–¶–µ–ª—å: ${ROLE_INFO[role].goal}`;
        roleCardSection.style.display = 'block';
    }
} 